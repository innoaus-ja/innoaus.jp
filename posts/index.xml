<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on innoaus | 株式会社イノス</title>
    <link>https://innoaus.jp/posts/</link>
    <description>Recent content in Posts on innoaus | 株式会社イノス</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 26 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://innoaus.jp/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;コンソールアプリケーションに色をつける</title>
      <link>https://innoaus.jp/posts/20190226/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190226/</guid>
      <description>プロジェクトrangはヘッダファイルのみで動作するコンソールアプリケーションに色をつけるオープンソースです。
https://github.com/agauniyal/rang
Colors for your Terminal. Unix-like (Linux, unix, mac) Windows Demo 必要ライブラリ rangはC++ standard libraryのみで動作するため、追加ライブラリは必要ありません。
インストール $ git clone https://github.com/agauniyal/rang.git  適用 インストールフォルダのinclude/rang.hppファイルをコピーするか、includeフォルダをプロジェクトパスに追加します。
オプション Text Styles    Code Linux/Win/Others Old Win     rang::style::bold yes yes   rang::style::dim yes no   rang::style::italic yes no   rang::style::underline yes no   rang::style::blink no no   rang::style::rblink no no   rang::style::reversed yes yes   rang::style::conceal maybe yes   rang::style::crossed yes no    Text Color    Code Linux/Win/Others Old Win     rang::fg::black yes yes   rang::fg::red yes yes   rang::fg::green yes yes   rang::fg::yellow yes yes   rang::fg::blue yes yes   rang::fg::magenta yes yes   rang::fg::cyan yes yes   rang::fg::gray yes yes    Background Color    Code Linux/Win/Others Old Win     rang::bg::black yes yes   rang::bg::red yes yes   rang::bg::green yes yes   rang::bg::yellow yes yes   rang::bg::blue yes yes   rang::bg::magenta yes yes   rang::bg::cyan yes yes   rang::bg::gray yes yes    Bright Foreground Color    Code Linux/Win/Others Old Win     rang::fgB::black yes yes   rang::fgB::red yes yes   rang::fgB::green yes yes   rang::fgB::yellow yes yes   rang::fgB::blue yes yes   rang::fgB::magenta yes yes   rang::fgB::cyan yes yes   rang::fgB::gray yes yes    Bright Background Color    Code Linux/Win/Others Old Win     rang::bgB::black yes yes   rang::bgB::red yes yes   rang::bgB::green yes yes   rang::bgB::yellow yes yes   rang::bgB::blue yes yes   rang::bgB::magenta yes yes   rang::bgB::cyan yes yes   rang::bgB::gray yes yes    Reset Styles/Colors    Code Linux/Win/Others Old Win     rang::style::reset yes yes   rang::fg::reset yes yes   rang::bg::reset yes yes    簡単なsample code #include &amp;quot;rang.</description>
    </item>
    
    <item>
      <title>golangインストール（CentOS7）</title>
      <link>https://innoaus.jp/posts/20190224/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190224/</guid>
      <description>準備 すべてのユーザーが利用する場合はsudo権限が必要です。
もし、特定のユーザーのみである場合は必要ありません。
goダウンロード 現在最新バージョンは1.12
cd /usr/local/src $ sudo curl -O https://dl.google.com/go/go1.12.linux-amd64.tar.gz  チェックサム確認 sha256 checksumを利用しチェックサムを確認します。
ダウンロードしたファイルのchecksumを確認し、サイトのSHA256 Checksumと同じか確認します。
https://golang.org/dl/ のgo1.12.linux-amd64.tar.gz SHA256 Checksumは750a07fef8579ae4839458701f4df690e0b20b8bcce33b437e4df89c451b6f13
$ sha256checkup go1.12.linux-amd64.tar.gz 750a07fef8579ae4839458701f4df690e0b20b8bcce33b437e4df89c451b6f13 go1.12.linux-amd64.tar.gz  ダウンロードしたファイル解凍 ダウンロードしたパッケージはすでにCentOS7用にビルドされているので解凍してそのまま使用可能です。
$ sudo tar xvfz go1.12.linux-amd64.tar.gz  解凍するとgo, gocache, tmpフォルダが作成されます。
go実行（バージョン確認） binディレクトリに移動し
$ cd /usr/local/go/bin $ ./go version go version go1.12 linux/amd64  goの前に./を付けないといけないことに注意。
環境変数 ~/.bash_profileにGOPATHの設定とPATHを通します。
$ vi ~/.bash_profile export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin export PATH=$PATH:/usr/local/go/bin  このままでは変更が反映されないので、ログアウトしなおすか、
$ source ~/.bash_profile  または</description>
    </item>
    
    <item>
      <title>vuepressを試す（デフォルトテーマ）</title>
      <link>https://innoaus.jp/posts/20190222/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190222/</guid>
      <description>.vuepressフォルダにthemeフォルダを作成し、githubのvuepressデフォルトテーマを参考に必要なフォルダとファイルのみ作成すると上書きされます。
しかし、githubを参考しながらの作業は大変なので、デフォルトテーマを展開しておきます。
cd dev_docs npx vuepress eject //vuepressはローカルなのでnpxを利用  .vuepress\themeにデフォルトテーマファイルがコピーされます。
*まだalphaバージョンなのでディレクトリ構成は変わる可能性があります。
Home readme.meのyaml部分に以下のように設定するとvuepress.vuejs.orgのトップ画面と同じように表示されます。
home: true heroImage: /hero.png heroText: Hero Title tagline: Hero subtitle actionText: Get Started → actionLink: /guide/ features: - title: Simplicity First details: Minimal setup with markdown-centered project structure helps you focus on writing. - title: Vue-Powered details: Enjoy the dev experience of Vue + webpack, use Vue components in markdown, and develop custom themes with Vue. - title: Performant details: VuePress generates pre-rendered static HTML for each page, and runs as an SPA once a page is loaded.</description>
    </item>
    
    <item>
      <title>vuepressを試す（基本設定:メニュー、サイドバー、meta要素設定方法）</title>
      <link>https://innoaus.jp/posts/20190220/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190220/</guid>
      <description>vuepressを試す（環境準備）の続き
サイト共通設定　ナビバー、サイドバー dev_docsフォルダにabout.mdを作成します。
.vuepressフォルダにpublicフォルダとconfig.jsファイルを作成し、以下を記入。
publicフォルダには静的ファイル（画像など）を配置します。
module.exports = { themeConfig: { logo : &#39;logo.png&#39;, // \dev_docs\.vuepress\public\logo.png search: true, // 検索機能 nav: [ //ナビバーリンク { text: &#39;Home&#39;, link: &#39;/&#39; }, { text: &#39;About&#39;, link: &#39;/about.html&#39; }, { text: &#39;サブメニュー&#39;, items: [ { text: &#39;メニュー１&#39;, link: &#39;/&#39; }, { text: &#39;メニュー２&#39;, link: &#39;/about.html&#39; }, ] } ], sidebar: [　//サイドバーリンク [&#39;/&#39;, &#39;サイドバーメニュー１&#39;], [&#39;/about.html&#39;, &#39;サイドバーメニュー２&#39;], ] } }  npm run dev  ブラウザhttp://localhost:8080/で確認します。</description>
    </item>
    
    <item>
      <title>vuepressを試す（環境準備）</title>
      <link>https://innoaus.jp/posts/20190218/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190218/</guid>
      <description>vuepressは現在バージョン0.xと1.x alpha二つありますが、1.xからはplugin機能が強化され、Blogサイトなどを構築しやすくなっているようです。
（ドキュメント系サイトならどのバージョンでもそんなに差はないと思います。）
インストール 今回は1.x alphaバージョンをローカルインストールします。
作業用フォルダ(vuepress_v1_test)作成後、
cd vuepress_v1_test npm init -y npm install -D vuepress@next  インストール完了後、フォルダ(dev_docs)を作成します。
vuepressをローカルインストールしたので、vuepressコマンドを使うことはできませんのでnpm scriptsを利用します。
package.jsonファイルのscripts部分を次のように変更します。
&amp;quot;scripts&amp;quot;: { &amp;quot;dev&amp;quot;: &amp;quot;vuepress dev dev_docs&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;vuepress build dev_docs&amp;quot; },  *scriptsを利用しない場合は
npx vuepress dev dev_docs  これで環境準備が終わりました。
markdownファイルを書く dev_docsフォルダにreadme.mdファイルを作成し、markdownを書きます。
# VuePressテスト  （readme.mdはindex.htmlに変換されます。）
ブラウザ表示確認 npm run dev  ブラウザからhttp://localhost:8080/を開くとVuePressテストが表示されます。
readme.mdファイルを編集するとブラウザが自動更新されるので、編集内容を確認しながらmarkdownを書くことができます。
Build npm run build  buildコマンドを実行すると.vuepress\distフォルダに変換されたHTMLファイルが出力されます。
基本設定などは次回に。</description>
    </item>
    
  </channel>
</rss>