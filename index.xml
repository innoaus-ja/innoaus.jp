<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>innoaus | 株式会社イノス</title>
    <link>https://innoaus.jp/</link>
    <description>Recent content on innoaus | 株式会社イノス</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 19 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://innoaus.jp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Onion Omega2&#43; セットアップ、接続方法</title>
      <link>https://innoaus.jp/posts/20190319/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190319/</guid>
      <description> 準備  Onion Omega2+ Expansion Dock  セットアップ 電源オン  Omega2+、Expansion Dock、USBケーブルを準備します。  Expansion DockにOmega2+を下記のようにセットします。  USBケーブルをPCにつなぐとOmega2+のLEDランプが点滅します。
もし、点滅しない場合はExpansion Dock右側の電源スイッチを確認してください。   Omega2+接続  Omega2+ LEDの点滅が終われば起動完了です。 無線LANのアクセスポイントからOmega-xxxx(xxxはOmegaMACアドレス下4桁)を選択します。
デフォルトパスワードは12345678です。  ブラウザから192.168.3.1に接続します。   Omega2+初期設定  Omegaにログインします。
デフォルトUsernameはroot、Passwordはonioneerです。  WiFi情報を入力します。  クラウドにログインしOmega機器を登録します。
[Skip Step&amp;gt;]を選択します。  Install Consoleを選択、&amp;rsquo;Upgrade Firmware..&amp;lsquo;を選択します。  ファームウェアアップデートと設定が行われます。終わると自動再起動しますが、再起動しない場合は電源スイッチから起動します。
  Omega2+接続  ブラウザにomega-xxxx.local(xxxはOmegaMACアドレス下4桁)を入力し、Omegaに接続します。  デフォルトUsernameはroot、Passwordはonioneerです。  これで初期設定が完了しました。   References  Onion Omega2 Documentation  </description>
    </item>
    
    <item>
      <title>CentOS7&#43;Nginx 1.14&#43;php7.2&#43;php-fpm環境構築 3 (php-fpm UNIX socket接続設定)</title>
      <link>https://innoaus.jp/posts/20190312/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190312/</guid>
      <description>Nginx 1.14インストール php7.2,php-fpmインストール php-fpm UNIX socket接続設定  php-fpm設定 $ cd /etc/php-fpm.d $ vi www.conf # 24行目あたり - user = apache + user = nginx - group = apache + group = nginx # 38行目あたり - listen = 127.0.0.1:9000 + listen = /var/run/php-fpm/php-fpm.sock # 48行目あたり - ;listen.owner = nobody - ;listen.group = nobody - ;listen.mode = 0660 + listen.owner = nginx + listen.group = nginx + listen.mode = 0660  php-fpm再起動後、php-fpm.</description>
    </item>
    
    <item>
      <title>CentOS7&#43;Nginx 1.14&#43;php7.2&#43;php-fpm環境構築 2 (php7.2,php-fpmインストール)</title>
      <link>https://innoaus.jp/posts/20190311/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190311/</guid>
      <description>Nginx 1.14インストール php7.2,php-fpmインストール php-fpm UNIX socket接続設定  php7.2, php-fpmインストール レポジトリ情報を追加 $ sudo yum -y install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm  yum info で PHP のパッケージ情報を確認 $ yum info --enablerepo=remi,remi-php72 php #~~~ Version : 7.2.16  インストール $ sudo yum -y install --enablerepo=remi,remi-php72 php php-fpm  バージョン確認 $ php -v PHP 7.2.16 (cli) (built: Mar 5 2019 14:45:10) ( NTS )  サービス自動起動有効 $ sudo systemctl enable php-fpm  Nginx設定変更（php-fpm） とりあえず、php-fpmはTCP接続で確認します。
UNIX socket接続設定はこちら</description>
    </item>
    
    <item>
      <title>CentOS7&#43;Nginx 1.14&#43;php7.2&#43;php-fpm環境構築 1 (Nginx 1.14インストール)</title>
      <link>https://innoaus.jp/posts/20190308/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190308/</guid>
      <description>作業ログとして残しておきます。
 Nginx 1.14インストール php7.2,php-fpmインストール php-fpm UNIX socket接続設定  Nginx リポジトリ追加 $ sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm  パッケージ情報からバージョン確認 $ sudo yum info --enablerepo=nginx nginx ~~~中略 Version : 1.14.2.  インストール $ sudo yum -y install --enablerepo=nginx nginx  バージョン確認 $ nginx -v nginx version: nginx/1.14.2  Nginx起動 $ sudo systemctl start nginx  ブラウザからIPアドレス(http://xxx.xxx.xxx.xxx/)にアクセスし、nginxのデフォルトページが表示されることを確認。
ドキュメントルートディレクトリ変更 Nginxデフォルトルートディレクトリ　：　/usr/share/nginx/html
/var/www/html/exemple.comへ変更する場合。
$ cd /etc/nginx/conf.d // 念のためバックアップ $ sudo cp default.conf default.conf.back $ sudo mv default.</description>
    </item>
    
    <item>
      <title>SlackとGitHubを連携して通知を受け取る</title>
      <link>https://innoaus.jp/posts/20190307_1/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190307_1/</guid>
      <description>GitHub App追加 Slackのを選択するとAPP検索が表示されます。
Githubを検索し[インストール]を選択します。
するとSlack AppsにGitHubメニューが追加されます。
GitHub repository通知登録 GitHubメニュー選択後、入力欄に追加するgithub repositoryを /github subscribe owner/repository形式入力します。
GitHub認証 Githubアカウント情報を連携するボタンが表示されるのでconnect GitHub accountを選択します。 ブラウザからGitHubにログインするとSlackに次のような通知が届きます。 続けてどのrepositoryを連携するか選択します。
完了するとSlackにSubscribed to owner/repositoryと通知が来ると完了です。
repository通知削除 登録したrepositoryを削除する場合はunsubscribeコマンドを利用します。
/github unsubscribe owner/repository
通知項目 デフォルト通知項目。
 issues - Opened or closed issues pulls - New or merged pull requests statuses - Statuses on pull requests commits - New commits on the default branch (usually master) deployments - Updated status on deployments public - A repository switching from private to public releases - Published releases  追加可能な通知項目</description>
    </item>
    
    <item>
      <title>ダウンタイムを最小限に動作中のサービスをアップデートする方法（CentOS 7）</title>
      <link>https://innoaus.jp/posts/20190307/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190307/</guid>
      <description> シナリオ  サービスは動作中 サービス実行ファイル名はa_process サービス実行ファイル動作に必要なshared objectファイル名はa_lib.so サービス名はa_process.service a_lib.soファイルをアップデート  アップデートスクリプト作成 $ vi update_service.sh #!/bin/sh sudo service a_process.service stop sudo cp a_lib.so {ディレクトリ}/a_lib.so sudo systemctl daemon-reload sudo service a_process.service start  作成したupdate_service.shに実行モードを設定します。
chmod +x update_service.sh  サービスアップデートのためにはsudo権限が必要です。
動作中のサービスを停止します。
sudo service a_process.service stop  shared objectをコピーします。
sudo cp a_lib.so {ディレクトリ}/a_lib.so  サービスが更新されるとサービスコントローラーのreloadが必要です。
sudo systemctl daemon-reload  サービスをスタートします。
sudo service a_process.service start  </description>
    </item>
    
    <item>
      <title>CentOS 7でACEライブラリビルド</title>
      <link>https://innoaus.jp/posts/20190306/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190306/</guid>
      <description>以下は https://github.com/DOCGroup/ACE_TAO のソースからCentOS 7でAECライブラリビルドする方法です。
必要事項 gcc, g++コンパイラーが必要です。
CentOS 6,7にgcc-7および関連開発ツールインストール 参考
最新バージョンダウンロード https://github.com/DOCGroup/ACE_TAO/releases から最新バージョンをダウンロードします。
現在最新バージョンは6.5.4です。 ACE-6.5.4.tar.gz
$ wget https://github.com/DOCGroup/ACE_TAO/releases/download/ACE%2BTAO-6_5_4/ACE-6.5.4.tar.gz  解凍 $ tar xvfz ACE-5.6.4.tar.gz  コンパイル環境設定 ACEライブラリをコンパイルするためには環境変数にACE_ROOTの設定が必要です。
ACE_ROOT環境変数はACE_wrappersパスを意味します。
$ cd ACE_wrappers $ export ACE_ROOT=$PWD  リナックスバージョンのconfig.hファイルをACE_wrappers/aceに作成します。
ここでは簡単にsymbolic linkを利用し作成します。
$ cd ACE_wrappers/ace $ ln -s config-linux.h config.h  そして、コンパイラーオプションを設定するため、ACE_wrappers/include/makeinclude/platform_macros.GNUファイルを次のように作成します。
$ vi ACE_wrappers/include/makeinclude/platform_macros.GNU include $(ACE_ROOT)/include/makeinclude/platform_linux.GNU INSTALL_PREFIX=$(HOME)/devtools CPPFLAGS=-fPIC  動的ライブラリの作成 $ cd ACE_wrappers $ make -j 8 install  このようにすれば、コンパイルされた結果は$HOME/devtoolsにインストールされます。
-j 8は並列コンパイルオプション、8はコア数を意味します。</description>
    </item>
    
    <item>
      <title>Androidの「日付と時刻」設定値を確認するコードサンプル</title>
      <link>https://innoaus.jp/posts/20190305_2/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190305_2/</guid>
      <description>Androidデバイス設定「日付と時刻」の設定値（On/Off）をコードから確認する方法です。
環境  Android Device Version: android API 28 Android Studio 3.3.1 Kotlin 1.3.20  「日付と時刻」確認 デバイス設定ー＞「システム」ー＞「日付と時刻」メニューから確認します。
New Project 新規プロジェクトを作成します。
EmptyActivity Template選択
サンプルコード //activity_main.xml &amp;lt;TextView android:id=&amp;quot;@+id/text_result&amp;quot; android:layout_width=&amp;quot;wrap_content&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot;/&amp;gt;  // #MainActivity.kt fun check() { val result = android.provider.Settings.Global.getInt(contentResolver, android.provider.Settings.Global.AUTO_TIME, 0) if (result == 1) { text_result.setText(&amp;quot;DateTime Sync: On&amp;quot;) } else { text_result.setText(&amp;quot;DateTime Sync: Off&amp;quot;) } }  結果 「日付と時刻」の設定値によってDateTime Sync: OnとDateTime Sync: Offが表示されます。
参考  Android Developer Site　:　Settings.</description>
    </item>
    
    <item>
      <title>CentOS 7にICE(Internet Communications Engine)インストール</title>
      <link>https://innoaus.jp/posts/20190305/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190305/</guid>
      <description>ICEはZeroC, Inc. (https://www.zeroc.com) 社が開発した分散オブジェクトモデルのためのフレームワークで、様々な言語をサポートします。
以下はCentOS 7にIce Frameworkをインストール方法を整理しました。
yumリポジトリ構成 $ wget https://zeroc.com/download/Ice/3.7/el7/zeroc-ice3.7.repo $ sudo cp zeroc-ice3.7.repo /etc/yum.repos.d/  Iceインストール(C++, Python, PHPそしてIce基盤サービスインストール) $ sudo yum -y install ice-all-runtime ice-all-devel  確認 slice2cppはSliceファイルをコンパイルし、C++コードを生成するコマンドです。
$ slice2cpp slice2cpp: error: no input file Usage: slice2cpp [options] slice-files... Options: -h, --help Show this message. -v, --version Display the Ice version. -DNAME Define NAME as 1. -DNAME=DEF Define NAME as DEF. -UNAME Remove any definition for NAME. -IDIR Put DIR in the include file search path.</description>
    </item>
    
    <item>
      <title>CentOS 7にPostgresql Service設定</title>
      <link>https://innoaus.jp/posts/20190304_2/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190304_2/</guid>
      <description>ソースコードからビルドしたか、コピーしたデータベースをサービスとして登録するための方法を整理しました。
サービススクリプト作成 $ vi postgresql.service # Systemd service definition for postgresql-bdr94 # # It&#39;s not recommended to modify this file in-place, because it will be # overwritten during package upgrades. If you want to customize, the # best way is to create a file &amp;quot;/etc/systemd/system/postgresql-9.4.service&amp;quot;, # containing # .include /lib/systemd/system/postgresql-9.4.service # ...make your changes here... # For more info about custom unit files, see # http://fedoraproject.org/wiki/Systemd#How_do_I_customize_a_unit_file.2F_add_a_custom_unit_file.3F # Note: changing PGDATA will typically require adjusting SELinux # configuration as well.</description>
    </item>
    
    <item>
      <title>CentOS7にPostgreSQL Multi-MasterデータベースPostgresql-BDR 9.4インストール</title>
      <link>https://innoaus.jp/posts/20190304_1/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190304_1/</guid>
      <description>以下は2ndQuadrant社のPostgreSQL Multi-Masterプラグインbdr(Bidirectional Replication Plugin)のインストール方法です。
Postgres-BDRソースコードからビルドしインストール ソースコードからビルドするためにはgccコンパイラが必要です。
今回はgcc 7を使用します。
gcc 7インストール関連記事
準備 $ sudo yum -y install centos-release-scl $ sudo yum -y install devtoolset-7 $ sudo yum -y install readline-devel bison-devel bison flex-devel flex zlib-devel $ sudo yum -y install git  Postgres-BDR-9.4インストール 最新ソースを$HOME/2ndquadrant_bdrフォルダにダウンロードし、ビルドします。
$ curl -s &amp;quot;https://raw.githubusercontent.com/2ndQuadrant/bdr/bdr-plugin/REL1_0_STABLE/scripts/bdr_quickstart.sh&amp;quot; | bash  インストール確認 問題なくビルドできたら$HOME/2ndquadrant_bdrフォルダに
drwxrwxr-x. 6 user user 56 Mar 3 11:30 bdr drwxrwxr-x. 7 user user 4096 Mar 3 11:28 bdr-pg-src drwxrwxr-x.</description>
    </item>
    
    <item>
      <title>CentOS(6/7)にgcc-7および関連開発ツールインストール</title>
      <link>https://innoaus.jp/posts/20190303/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190303/</guid>
      <description>SoftwareCollections.orgプロジェクト SoftwareCollections.orgプロジェクトはRed Hat Enterprise Linux, Fedora, CentOS, Scientific LinuxのSoftware Collections(SCLs)を作るプロジェクトです。
https://www.softwarecollections.org
Software Collectionsは同じソフトウェアコンポーネントの複数のバージョンを同時にシステムにインストールできます。
Software Collectionインストール $ sudo yum -y install centos-release-scl Loaded plugins: fastestmirror Determining fastest mirrors * base: data.aonenetworks.kr * extras: data.aonenetworks.kr * updates: data.aonenetworks.kr base | 3.6 kB 00:00:00 extras | 3.4 kB 00:00:00 updates | 3.4 kB 00:00:00 (1/4): base/7/x86_64/group_gz | 166 kB 00:00:00 (2/4): extras/7/x86_64/primary_db | 180 kB 00:00:00 (3/4): updates/7/x86_64/primary_db | 2.4 MB 00:00:00 (4/4): base/7/x86_64/primary_db | 6.</description>
    </item>
    
    <item>
      <title>「CentOS 7」Cisco VPN接続のためのVPNクライアントvpncインストール</title>
      <link>https://innoaus.jp/posts/20190302/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190302/</guid>
      <description>EPELパッケージインストール vpncパッケージは基本リポジトリにないためEPEL(Extra Packages for Enterprise Linux)パッケージを追加します。
EPEL Site : https://fedoraproject.org/wiki/EPEL
# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm Loaded plugins: fastestmirror epel-release-latest-7.noarch.rpm | 15 kB 00:00:00 Examining /var/tmp/yum-root-I01hVd/epel-release-latest-7.noarch.rpm: epel-release-7-11.noarch Marking /var/tmp/yum-root-I01hVd/epel-release-latest-7.noarch.rpm to be installed Resolving Dependencies --&amp;gt; Running transaction check ---&amp;gt; Package epel-release.noarch 0:7-11 will be installed --&amp;gt; Finished Dependency Resolution Dependencies Resolved ====================================================================================================================================================== Package Arch Version Repository Size ====================================================================================================================================================== Installing: epel-release noarch 7-11 /epel-release-latest-7.noarch 24 k Transaction Summary ====================================================================================================================================================== Install 1 Package Total size: 24 k Installed size: 24 k Is this ok [y/d/N]: y Downloading packages: Running transaction check Running transaction test Transaction test succeeded Running transaction Installing : epel-release-7-11.</description>
    </item>
    
    <item>
      <title>[Linux] 一般ユーザーにパスワードなしでsudoコマンドを使えるようにする</title>
      <link>https://innoaus.jp/posts/20190301/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190301/</guid>
      <description>開発環境などで毎回sudoパスワードを入力するのは面倒なことです。 パスワードを入力しなくてもsudoコマンドを実行できる方法を紹介します。
sudoコマンド関連設定ファイルは /etc/sudoers です。
＊ユーザーがuser1の場合
すべてのコマンドに対してパスワード入力なし設定
$ sudo vi /etc/sudoers #ファイルの最後に %user1 ALL=(ALL) NOPASSWD: ALL  を追記
一部のコマンド(/bin/kill, /bin/rm)に対して設定する場合は
%user1 ALL=(ALL) NOPASSWD: /bin/kill, /bin/rm  sudoersファイルをより安全に編集たい場合はvisudoコマンドを使用してください。
visudo</description>
    </item>
    
    <item>
      <title>C&#43;&#43;　Lambda関数呼び出し</title>
      <link>https://innoaus.jp/posts/20190228/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190228/</guid>
      <description>C++11で導入されたLambda（ラムダ）関数は普通の関数と違い名前のない関数（anonymous function）が特徴です。
無名関数と呼ばれることもあります。
以下はLambda関数呼び出しの簡単なサンプルです。
C++ コンパイラの実装状況はhttps://en.cppreference.com/w/cpp/compiler_supportで確認することができます。
function pointerを利用した呼び出しサンプル auto a_lamda_function = [](const std::string&amp;amp; msg) { std::cout &amp;lt;&amp;lt; &amp;quot;function pointerを利用した呼び出しサンプル : &amp;quot; &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; std::endl; } void (* funcPtr)(int) = a_lamda_function; funcPtr(&amp;quot;Hello World!!!&amp;quot;);  C++17から実装されたstd::apply関数を利用した呼び出しサンプル #include &amp;lt;iostream&amp;gt; #include &amp;lt;tuple&amp;gt; #include &amp;lt;utility&amp;gt; int add(int first, int second) { return first + second; } template&amp;lt;typename T&amp;gt; T add_generic(T first, T second) { return first + second; } auto add_lambda = [](auto first, auto second) { return first + second; }; int main() { // OK std::cout &amp;lt;&amp;lt; std::apply(add, std::make_pair(1, 2)) &amp;lt;&amp;lt; &#39;\n&#39;; // Error: can&#39;t deduce the function type // std::cout &amp;lt;&amp;lt; std::apply(add_generic, std::make_pair(2.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;コンソールアプリケーションに色をつける</title>
      <link>https://innoaus.jp/posts/20190226/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190226/</guid>
      <description>プロジェクトrangはヘッダファイルのみで動作するコンソールアプリケーションに色をつけるオープンソースです。
https://github.com/agauniyal/rang
Colors for your Terminal. Unix-like (Linux, unix, mac) Windows Demo 必要ライブラリ rangはC++ standard libraryのみで動作するため、追加ライブラリは必要ありません。
インストール $ git clone https://github.com/agauniyal/rang.git  適用 インストールフォルダのinclude/rang.hppファイルをコピーするか、includeフォルダをプロジェクトパスに追加します。
オプション Text Styles    Code Linux/Win/Others Old Win     rang::style::bold yes yes   rang::style::dim yes no   rang::style::italic yes no   rang::style::underline yes no   rang::style::blink no no   rang::style::rblink no no   rang::style::reversed yes yes   rang::style::conceal maybe yes   rang::style::crossed yes no    Text Color    Code Linux/Win/Others Old Win     rang::fg::black yes yes   rang::fg::red yes yes   rang::fg::green yes yes   rang::fg::yellow yes yes   rang::fg::blue yes yes   rang::fg::magenta yes yes   rang::fg::cyan yes yes   rang::fg::gray yes yes    Background Color    Code Linux/Win/Others Old Win     rang::bg::black yes yes   rang::bg::red yes yes   rang::bg::green yes yes   rang::bg::yellow yes yes   rang::bg::blue yes yes   rang::bg::magenta yes yes   rang::bg::cyan yes yes   rang::bg::gray yes yes    Bright Foreground Color    Code Linux/Win/Others Old Win     rang::fgB::black yes yes   rang::fgB::red yes yes   rang::fgB::green yes yes   rang::fgB::yellow yes yes   rang::fgB::blue yes yes   rang::fgB::magenta yes yes   rang::fgB::cyan yes yes   rang::fgB::gray yes yes    Bright Background Color    Code Linux/Win/Others Old Win     rang::bgB::black yes yes   rang::bgB::red yes yes   rang::bgB::green yes yes   rang::bgB::yellow yes yes   rang::bgB::blue yes yes   rang::bgB::magenta yes yes   rang::bgB::cyan yes yes   rang::bgB::gray yes yes    Reset Styles/Colors    Code Linux/Win/Others Old Win     rang::style::reset yes yes   rang::fg::reset yes yes   rang::bg::reset yes yes    簡単なsample code #include &amp;quot;rang.</description>
    </item>
    
    <item>
      <title>golangインストール（CentOS7）</title>
      <link>https://innoaus.jp/posts/20190224/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190224/</guid>
      <description>準備 すべてのユーザーが利用する場合はsudo権限が必要です。
もし、特定のユーザーのみである場合は必要ありません。
goダウンロード 現在最新バージョンは1.12
$ cd /usr/local/src $ sudo curl -O https://dl.google.com/go/go1.12.linux-amd64.tar.gz  チェックサム確認 sha256 checksumを利用しチェックサムを確認します。
ダウンロードしたファイルのchecksumを確認し、サイトのSHA256 Checksumと同じか確認します。
https://golang.org/dl/ のgo1.12.linux-amd64.tar.gz SHA256 Checksumは750a07fef8579ae4839458701f4df690e0b20b8bcce33b437e4df89c451b6f13
$ sha256checkup go1.12.linux-amd64.tar.gz 750a07fef8579ae4839458701f4df690e0b20b8bcce33b437e4df89c451b6f13 go1.12.linux-amd64.tar.gz  ダウンロードしたファイル解凍 ダウンロードしたパッケージはすでにCentOS7用にビルドされているので解凍してそのまま使用可能です。
$ sudo tar xvfz go1.12.linux-amd64.tar.gz  解凍するとgo, gocache, tmpフォルダが作成されます。
go実行（バージョン確認） binディレクトリに移動し
$ cd /usr/local/go/bin $ ./go version go version go1.12 linux/amd64  goの前に./を付けないといけないことに注意。
環境変数 ~/.bash_profileにGOPATHの設定とPATHを通します。
$ vi ~/.bash_profile export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin export PATH=$PATH:/usr/local/go/bin  このままでは変更が反映されないので、ログアウトしなおすか、
$ source ~/.</description>
    </item>
    
    <item>
      <title>vuepressを試す（デフォルトテーマ）</title>
      <link>https://innoaus.jp/posts/20190222/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190222/</guid>
      <description>.vuepressフォルダにthemeフォルダを作成し、githubのvuepressデフォルトテーマを参考に必要なフォルダとファイルのみ作成すると上書きされます。
しかし、githubを参考しながらの作業は大変なので、デフォルトテーマを展開しておきます。
cd dev_docs npx vuepress eject //vuepressはローカルなのでnpxを利用  .vuepress\themeにデフォルトテーマファイルがコピーされます。
*まだalphaバージョンなのでディレクトリ構成は変わる可能性があります。
Home readme.meのyaml部分に以下のように設定するとvuepress.vuejs.orgのトップ画面と同じように表示されます。
home: true heroImage: /hero.png heroText: Hero Title tagline: Hero subtitle actionText: Get Started → actionLink: /guide/ features: - title: Simplicity First details: Minimal setup with markdown-centered project structure helps you focus on writing. - title: Vue-Powered details: Enjoy the dev experience of Vue + webpack, use Vue components in markdown, and develop custom themes with Vue. - title: Performant details: VuePress generates pre-rendered static HTML for each page, and runs as an SPA once a page is loaded.</description>
    </item>
    
    <item>
      <title>vuepressを試す（基本設定:メニュー、サイドバー、meta要素設定方法）</title>
      <link>https://innoaus.jp/posts/20190220/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190220/</guid>
      <description>vuepressを試す（環境準備）の続き
サイト共通設定　ナビバー、サイドバー dev_docsフォルダにabout.mdを作成します。
.vuepressフォルダにpublicフォルダとconfig.jsファイルを作成し、以下を記入。
publicフォルダには静的ファイル（画像など）を配置します。
module.exports = { themeConfig: { logo : &#39;logo.png&#39;, // \dev_docs\.vuepress\public\logo.png search: true, // 検索機能 nav: [ //ナビバーリンク { text: &#39;Home&#39;, link: &#39;/&#39; }, { text: &#39;About&#39;, link: &#39;/about.html&#39; }, { text: &#39;サブメニュー&#39;, items: [ { text: &#39;メニュー１&#39;, link: &#39;/&#39; }, { text: &#39;メニュー２&#39;, link: &#39;/about.html&#39; }, ] } ], sidebar: [　//サイドバーリンク [&#39;/&#39;, &#39;サイドバーメニュー１&#39;], [&#39;/about.html&#39;, &#39;サイドバーメニュー２&#39;], ] } }  npm run dev  ブラウザhttp://localhost:8080/で確認します。</description>
    </item>
    
    <item>
      <title>vuepressを試す（環境準備）</title>
      <link>https://innoaus.jp/posts/20190218/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/posts/20190218/</guid>
      <description>vuepressは現在バージョン0.xと1.x alpha二つありますが、1.xからはplugin機能が強化され、Blogサイトなどを構築しやすくなっているようです。
（ドキュメント系サイトならどのバージョンでもそんなに差はないと思います。）
インストール 今回は1.x alphaバージョンをローカルインストールします。
作業用フォルダ(vuepress_v1_test)作成後、
cd vuepress_v1_test npm init -y npm install -D vuepress@next  インストール完了後、フォルダ(dev_docs)を作成します。
vuepressをローカルインストールしたので、vuepressコマンドを使うことはできませんのでnpm scriptsを利用します。
package.jsonファイルのscripts部分を次のように変更します。
&amp;quot;scripts&amp;quot;: { &amp;quot;dev&amp;quot;: &amp;quot;vuepress dev dev_docs&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;vuepress build dev_docs&amp;quot; },  *scriptsを利用しない場合は
npx vuepress dev dev_docs  これで環境準備が終わりました。
markdownファイルを書く dev_docsフォルダにreadme.mdファイルを作成し、markdownを書きます。
# VuePressテスト  （readme.mdはindex.htmlに変換されます。）
ブラウザ表示確認 npm run dev  ブラウザからhttp://localhost:8080/を開くとVuePressテストが表示されます。
readme.mdファイルを編集するとブラウザが自動更新されるので、編集内容を確認しながらmarkdownを書くことができます。
Build npm run build  buildコマンドを実行すると.vuepress\distフォルダに変換されたHTMLファイルが出力されます。
基本設定などは次回に。</description>
    </item>
    
    <item>
      <title>Random ID Generator</title>
      <link>https://innoaus.jp/random_id_generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/random_id_generator/</guid>
      <description>独自開発したID生成アルゴリズム（RAINPASS）を用いたランダムID生成器
 大量のランダムIDを短時間で生成 文字数、文字列のカスタム可能  DEMO 最大20万件までCSVファイル形式でダウンロード可能です。</description>
    </item>
    
    <item>
      <title>会社情報</title>
      <link>https://innoaus.jp/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://innoaus.jp/about/</guid>
      <description>会社名 : 株式会社イノス（Innoaus、大阪府大阪市）  Skill  OS Embedded OS, Unix, Linux, Windows, Mac OS, iOS, Android Language C, C++, C#, Java, Objective-C, Swift, Javascript, PHP Database PostgresSQL, MS SQL, MySQL, Oracle 3rd Party Lib Crypto++, ACE, ICE, BOOST, ZeroMQ, OpenSSL, Xtreme Toolkit, DevExpress  
Contact info@innoaus.jp</description>
    </item>
    
  </channel>
</rss>